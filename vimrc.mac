set nocompatible
" Vundle {{{1
filetype off

set rtp+=~/.vim/bundle/Vundle.vim

call vundle#begin()
Plugin 'VundleVim/Vundle.vim'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin 'altercation/vim-colors-solarized'
"Plugin 'cormacrelf/vim-colors-github'

"Plugin 'gcmt/taboo.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tpope/vim-surround'
Plugin 'qpkorr/vim-bufkill'
Plugin 'scrooloose/nerdtree'

Plugin 'elzr/vim-json'
Plugin 'tpope/vim-markdown'
Plugin 'nelstrom/vim-markdown-folding'
"Plugin 'vim-pandoc/vim-pandoc'
"Plugin 'vim-pandoc/vim-pandoc-syntax'
"Plugin 'godlygeek/tabular'
"Plugin 'dhruvasagar/vim-table-mode'

"Plugin 'w0rp/ale'
"Plugin 'Shougo/vimproc.vim'
"Plugin 'eagletmt/ghcmod-vim'
Plugin 'Twinside/vim-hoogle'
Plugin 'derekwyatt/vim-scala'
"Plugin 'eagletmt/neco-ghc'
"Plugin 'alx741/vim-stylishask'
"Plugin 'alx741/vim-hindent'

Plugin 'tpope/vim-sensible'
call vundle#end()
" Base {{{1
filetype plugin indent on
syntax enable
" General {{{1
set showcmd
set cmdheight=2
set hidden
set encoding=utf-8
set clipboard=unnamed
set breakindent
let &showbreak = '↳ '
set cpo+=n
set expandtab
set tabstop=4
set shiftwidth=2
set softtabstop=2
set hlsearch
set incsearch
set wildmenu
set wildmode=list:longest,full
" http://bit.ly/2DpGoBD
let &wildcharm = &wildchar
cnoremap <C-j> <DOWN>
" Backup {{{1
set backup
set undofile
set noswapfile
set undodir=~/.vim/tmp/undo/
set backupdir=~/.vim/tmp/backup/
set backupskip=/tmp/*,/private/tmp/*
set writebackup
" Diff {{{1
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set nolist
" Spelling {{{1
set spelllang=en_us,de
set spellfile=$HOME/.vim/spell/nrm.utf-8.add
" Status line {{{1
let g:airline_theme='luna'
let g:airline#extensions#ale#enabled = 1
" Color and Font {{{1
"set background=dark
"colorscheme solarized
"colorscheme github
"let g:airline_theme = "github"
if has('gui_running')
  set background=light
  set guioptions=egmrL
  if has("gui_mac") || has("gui_macvim")
    " Use option (alt) as meta key.
    set macmeta
    set lines=30
    set columns=80
    "set guifont=Liberation\ Mono\ 10
    set guifont=Source\ Code\ Pro\ Light:h14
  endif
endif
"hi clear SpellBad
"hi SpellBad cterm=underline ctermfg=red
"hi Comment cterm=italic
" Cursor {{{1
" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
" Views {{{1
"" Cf. http://vim.wikia.com/wiki/Make_views_automatic
"set viewoptions-=options
"autocmd BufWinLeave *.hs mkview
"autocmd BufWinEnter *.hs silent loadview
"" autocmd BufWinLeave ?* mkview
"" autocmd BufWinEnter ?* silent loadview
" Mappings {{{1
" Inclusive movements {{{2
"onoremap h vh
"onoremap l vl
"onoremap b vb
"onoremap B vB
"onoremap F vF
"onoremap T vT
"onoremap ^ v^
"onoremap g^ vg^
"onoremap + v+
"onoremap g+ vg+
"onoremap ( v(
"onoremap ` v`
" Move with visual lines {{{2
"nnoremap j gj
"nnoremap k gk
"nnoremap 0 g0
"nnoremap ^ g^
"nnoremap $ g$
" Plugin settings {{{1
so $HOME/.vim/plugin/cmdalias.vim
" Select buffer {{{2
"let g:selBufDefaultSortOrder = "path"
":call CmdAlias('ls', 'SelectBuf')
" Buffer explorer {{{2
:call CmdAlias('ls', 'BufExplorer') " - or 'BufExplorerHorizontalSplit'
" Buffer kill {{{2
:call CmdAlias('bd', 'BD')
" Yank ring {{{2
":command! Yanks YRShow
"let g:yankring_window_use_bottom=0
"let g:yankring_manage_numbered_reg = 0
"let g:yankring_clipboard_monitor = 0
"let g:yankring_paste_check_default_buffer = 0
"let g:yankring_zap_keys = ''
"let g:yankring_paste_n_bkey = ''
"let g:yankring_paste_n_akey = ''
"let g:yankring_paste_v_key = ''
"let g:yankring_replace_n_pkey = ''
"let g:yankring_replace_n_nkey = ''
"let g:yankring_paste_v_bkey = ''
"let g:yankring_paste_v_akey = ''
" fzf {{{2
"set rtp+=/usr/local/opt/fzf
"let g:fzf_layout = { 'up': '~20%' }
"let g:fzf_buffers_jump = 1
"nnoremap <C-p> :<C-u>FZF<CR>
" vim-table-mode {{{2
"let g:table_mode_corner='+'
"let g:table_mode_corner_corner='+'
"let g:table_mode_header_fillchar='='
" netrw {{{2
" - :edit a folder to open a file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browse-maps| for more mappings
"let g:netrw_banner=0        " disable annoying banner
"let g:netrw_browse_split=4  " open in prior window
"let g:netrw_altv=1          " open splits to the right
"let g:netrw_liststyle=3     " tree view
"let g:netrw_list_hide=netrw_gitignore#Hide()
"let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'
" CtrlP {{{2
""set runtimepath^=~/.vim/bundle/ctrlp.vim
""let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_working_path_mode = 0
let g:ctrlp_show_hidden = 1
let g:ctrlp_custom_ignore = {
\ 'dir':  '\v[\/]\.(git|hg|svn)$',
\ 'file': '\v\.(exe|so|dll|class)$'
\ }
" NERD Tree options {{{2
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
let g:NERDTreeChDirMode = 2
" NERD Commenter
"let g:NERDSpaceDelims = 1
" Pandoc {{{2
"let g:pandoc#folding#fdc=0
" XML {{{2
au FileType xml setlocal equalprg=xmllint\ --format\ --recover\ -\ 2>/dev/null
" ctags {{{2
set tags=./tags,tags,../tags
command! MakeCTags !ctags -R .
command! MakeHTags !hasktags -L --ignore-close-implementation --ctags .
" ghc-mod {{{2
"map <silent> tq :GhcModType<CR>
"map <silent> te :GhcModTypeClear<CR>
"map <silent> tc :GhcModCheck<CR>
"map <silent> ti :GhcModInfo<CR>
"map <silent> tl :GhcModLint<CR>
" haskellmode-vim {{{2
"" stack path --compiler-exe
"au BufEnter *.hs compiler ghc
"let g:ghc="/Users/nrm/.stack/programs/x86_64-osx/ghc-8.0.2/bin/ghc"
"let g:haddock_browser="open"
"let g:haddock_browser_callformat="%s %s"
" vim-hindent {{{2
""setlocal formatprg=hindent
"let g:hindent_on_save=0
"let g:hindent_indent_size=3
"let g:hindent_line_length=80
"
"setlocal formatprg=
"nmap g= :Hindent<CR>
" vim-stylish-haskell {{{2
" haskell-vim {{{2
"let g:haskell_classic_highlighting = 1
" syntastic {{{2
"map <Leader>s :SyntasticToggleMode<CR>
"
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
"
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 0
"let g:syntastic_check_on_open = 0
"let g:syntastic_check_on_wq = 0
" supertab {{{2
"let g:SuperTabDefaultCompletionType = '<c-x><c-o>'

"if has("gui_running")
"  imap <c-space> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
"else
"  if has("unix")
"    inoremap <Nul> <c-r>=SuperTabAlternateCompletion("\<lt>c-x>\<lt>c-o>")<cr>
"  endif
"endif
" necoghc {{{2
"let g:haskellmode_completion_ghc = 1
"autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
" Functions {{{1
function! RemoveTrailingSpaces() "{{{
  silent! execute '%s/\s\+$//ge'
  silent! execute 'g/\v^$\n*%$/norm! dd'
endfunction
" OLD {{{1
" General {{{2
""set autowrite
"set completeopt=menuone,menu,longest
"set fileencoding=utf-8
"set fileencodings=utf-8
"set lazyredraw
"set linebreak
"set path+=**
"set smartindent
"set textwidth=80
""set timeout
""set timeoutlen=300
"set ttyfast
"set undofile
"set undolevels=5000
"set wildignore+=*\\tmp\\*,*.swp,*.swo,*.zip,.git,.cabal-sandbox,*.class,*.o
""set completeopt+=longest
"""set wrapscan

" vim:fdm=marker
